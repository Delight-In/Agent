# content.py

def generate_content(mode, recipient_name=None):
    """
    Generates a message based on the communication mode.
    Personalizes the message using the recipient's name if available.
    """

    name_part = f"{recipient_name}, " if recipient_name else ""

    if mode == 'sms':
        return f"Hi {name_part}this is a quick reminder about your upcoming appointment. Let us know if you have any questions."

    elif mode == 'email':
        return (
            f"Dear {recipient_name if recipient_name else 'Customer'},\n\n"
            "We hope you're doing well. This is a follow-up email regarding your recent request. "
            "Please let us know how we can assist you further.\n\n"
            "Best regards,\nSupport Team"
        )

    elif mode == 'whatsapp':
        return f"Hey {name_part}just checking in! Let us know if you need any assistance or have any questions."

    elif mode == 'call':
        return (
            f"Hello {name_part}this is an automated call from our team. "
            "We wanted to follow up with you regarding your recent interaction. "
            "If you have any questions, please stay on the line to be connected with a representative."
        )

    else:
        return "Unsupported communication mode selected. Please choose SMS, Email, WhatsApp, or Call."


# Optional: Placeholder for future GPT-based message generation

def generate_with_llm(mode, recipient_name=None):
    """
    Simulate GPT-based message generation (placeholder).
    Replace with real GPT API call if needed.
    """
    name = recipient_name or "Customer"
    prompt = f"Generate a professional and friendly {mode} message for a person named {name}."

    # Simulated response for now
    return f"[LLM] Hello {name}, this is a {mode.upper()} message generated by an AI. Please customize this message as needed."
